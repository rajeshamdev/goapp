
EC2:
-----
EC2 key pair tip: A key pair consists of "public key" that AWS stores, and a "private key" that you store.
Together, they allow you to connect to your instance securely. Download the private key file (.pem file) and
store it in a secure and accessible location.

If needed, change the pem file perms: chmod 400 <key.pem>
ssh -i "private_key.pem" ec2-user@ip
To become root: "sudo su" after logging in with ec2-user.

You could pass your public key while creating ec2 instance with terraform. In this case, downloadng
ec2 instance's private key is not required. You can use your private key to connect.

Add the EC2 key pair into your local ssh authentication agent using:
 ssh-add -K lab-002.pem (macos)
 ssh-add -c lab-002.pem (linux)


Testing of Golang App:
----------------------

 make linux
 docker build -t goapp:v1.0 .
 docker images
 docker run --rm -p 8080:8080 -e GCP_APIKEY="key" --name goapp goapp:v1.0

curl -X GET localhost:8080/v1/api/channel/UCZN6X0ldwi-2W4TV-ab5M_g/insights | python3 -m json.tool
curl -X GET localhost:8080/v1/api/channel/UCZN6X0ldwi-2W4TV-ab5M_g/videos | python3 -m json.tool
curl -X GET localhost:8080/v1/api/video/vrOttI2cgAM/insights | python3 -m json.tool
curl -X GET localhost:8080/v1/api/video/vrOttI2cgAM/sentiments | python3 -m json.tool

1) Money Purse Channel id: UChBT5TlUeG68PKvJSg6MkqQ
2) Akshat Shrivastava: UCqW8jxh4tH1Z1sWPbkGWL4g
3) Thulasi Chandu: UCZN6X0ldwi-2W4TV-ab5M_g
4) Sahil Bhadviya: UCdc6ObxhdQ8eZIFquU2xolA
5) Moneyvest: UCf3g0uNBn6wPpgrTK_AbJrQ
6) First Post: UCz8QaiQxApLq8sLNcszYyJw


Front-end React App:
-------------------
settting up react-app: npx create-react-app <myAPP>
To start UI app: npm start


For production app: run "npm run build" in the react-app dir.

Running Go server on the same EC2 instance as the React app, localhost refers to the EC2
instance itself, not the clientâ€™s browser. Instead, you should use the server's public DNS
or IP address for API requests.

docker build -t uiapp:v1.0 --build-arg REACT_APP_BACKEND_URL=http://localhost:8081 .
docker run --rm -p 3000:80 --name uiapp  uiapp:v1.0

On EC2:
install nginx: sudo yum install -y nginx
copy react-app to EC2 instance: scp -i ~/.ssh/id_rsa -r build ec2-user@IP:~/
copy to nginx root dir: sudo mv build /usr/share/nginx/html
debug : sudo lsof -i :80 or sudo lsof -i :8080

Running UI and Backend App together:
-----------------------------------
docker build -t goapp:v1.0 .
docker run -d --rm -p 8081:8080 --name goapp -e GCP_APIKEY="key" goapp:v1.0
docker build -t uiapp:v1.0 --build-arg REACT_APP_BACKEND_URL=http://localhost:8081 .
docker run -d --rm -p 3000:80 --name uiapp uiapp:v1.0
Access UI: http://localhost:3000


Mac OS Update:
-------------
For older mac OS (Mojave 10.14.6) install Docker Desktop 4.9.1 from https://docs.docker.com/desktop/release-notes/

docker build -t my-node-app .
docker run -p 3000:3000 my-node-app

Terraform:
---------
Destroy/Apply specific resource using terraform example:
 - terraform state list
 - terraform destroy -target=aws_vpc_security_group_egress_rule.allow_8080
 - terraform apply -target=aws_vpc_security_group_ingress_rule.allow_8080
Applying to specific target is THE MOST POWERFUL thing as you can push updated code
changes to just that target while keeping everything else the same.


Golang backend server:
---------------------
golang server to bind :8080

https://stackoverflow.com/questions/73830150/cannot-assign-requested-address-in-aws-java-server-socket

In general you would not bind to the IP address directly. You would instead bind to all interfaces by not
specifying a host. In this way you will respond to any incoming connections to the specified port. If I
look at a Wildfly server I have running with Apache HTTPD in front of it I get:

$ netstat -na | grep LIST
tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN
tcp6       0      0 :::80                   :::*                    LISTEN
In my case the Wildfly server is using IPv4 and Apache is using IPv6. But they are both listening
on what is, for IPv4, 0.0.0.0. The O/S takes care of the external interface to internal address mapping.


Lambda:
------
For some reason, the binary has to be bootstrap(?). Below steps worked for "now":
 - GOARCH=amd64 GOOS=linux go build -o bootstrap main.go
 - zip lambdaFunc.zip bootstrap

Then upload lambdaFunc.zip to Lambda func.

Passing env variable:
 - as tf variable:  terraform apply -var="gcp_apikey=<key>"
 - OR export TF_VAR_gcp_apikey=<>. This way, dont need to pass -var to terraform plan or apply

Print API URL:
 - terraform output

Test:
curl -X GET https://<id>.execute-api.us-east-2.amazonaws.com/dev/v1/api/channel/insights?id="UChBT5TlUeG68PKvJSg6MkqQ" | python3 -m json.tool


Docker/Containers:
-----------------
docker build -t youtube-react-app .
To build from no cache: docker build -t youtube-react-app --no-cache .
docker image ls
docker run -d -p 8080:80 --name myapp1 youtube-react-app
docker run -d -p 8081:80 --name myapp2 youtube-react-app
docker run -d -p 8082:80 --name myapp3 youtube-react-app
docker exec -it myapp1 /bin/sh
docker stop 91 59 29
docker rm 91 59 29


Pushing image to ECR:
---------------------
List ECR Repositories:
    aws ecr describe-repositories --query 'repositories[*].repositoryUri' --output table
    aws ecr describe-repositories

Authenticate Docker to Your ECR Registry:
    aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin <account>.dkr.ecr.us-east-2.amazonaws.com

Tag Your Docker Image:
    docker tag goapp:v1.0 <account>.dkr.ecr.us-east-2.amazonaws.com/rajeshamdev:goapp-v1.0

Push Your Docker Image to ECR:
    docker push <account>.dkr.ecr.us-east-2.amazonaws.com/rajeshamdev:goapp-v1.0

List images:
    aws ecr list-images --repository-name rajeshamdev --region us-east-2

To delete image from ECR:
    aws ecr batch-delete-image --repository-name rajeshamdev --region us-east-2 --image-ids imageDigest=


Copy docker image between two machines:
---------------------------------------
docker save -o image_name.tar image_name:tag
scp image_name.tar user@destination_machine:/path/to/destination
docker load -i /path/to/destination/image_name.tar
